#  aws cloudformation deploy --template-file vpc.yaml --stack-name vpc --capabilities CAPABILITY_NAMED_IAM

Description: "Andersen Training Homework 6. AWS Cloudformation"

Resources:
  ########################
  #### Create VPC
  ########################
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: "myVPC"

  ########################
  #### Create Subnets
  ########################
  # Create Public subnet A
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.0.21.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public_Subnet_A"

  # Create Public subnet B
  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.0.22.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public_Subnet_B"

  # Create Private subnet A
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.0.31.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Private_Subnet_A"

  # Create Public subnet B
  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.0.32.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "Private_Subnet_B"

  ########################################
  #### Create And Attach Internet Gateway
  ########################################
  # Create Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "Internet_Gateway"
  # Attach Internet Gateway to myVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  ############################################
  #### Create NAT Gateway for private networks
  ############################################
  natGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA
  EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ########################################
  #### Create Routing tables
  ########################################
  # Empty Public Route Table Creation
  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Public_Route_Table"

  # Routes creation and Attachment for Public  Route Table
  RoutesForInternetGateway:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

#  # Associate Public Route for Subnets
#  RouteAssociationSubnetA:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      RouteTableId: !Ref publicRouteTable
#      SubnetId: !Ref PublicSubnetA
#
#  RouteAssociationSubnetB:
#    Type: "AWS::EC2::SubnetRouteTableAssociation"
#    Properties:
#      RouteTableId: !Ref publicRouteTable
#      SubnetId: !Ref PublicSubnetA
#####################################################################################################
  # Empty Private Route Table Creation
  privateRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Private_Route_Table"

  # Routes creation and Attachment for Private  Route Table
  RoutesForNatGateway:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGateway

  # Associate Private Route for Subnets
  RouteAssociationPrivateSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId:
        - !Ref PrivateSubnetA
        -
  RouteAssociationPrivateSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref PrivateSubnetA

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket