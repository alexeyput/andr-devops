# aws cloudformation deploy --template-file hw6-Infrastructure.yaml --stack-name asd --capabilities CAPABILITY_NAMED_IAM

Description: "Andersen Training Homework 6. AWS CloudFormation"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - Environment
          - vpcCIDRblock
      -
        Label:
          default: "Subnets CIDR Blocks"
        Parameters:
          - PublicSubnetAcidrBlock
          - PublicSubnetBcidrBlock
          - PrivateSubnetAcidrBlock
          - PrivateSubnetBcidrBlock

Parameters:
  Environment:
    Type: String
    Default: "Dev"
    Description: "Environment"

  vpcCIDRblock:
    Type: String
    Default: '10.0.0.0/16'
    Description: "VPC CIDR Block"

  PublicSubnetAcidrBlock:
    Type: String
    Default: '10.0.21.0/24'
    Description: "Public Subnet-A CIDR Block"

  PublicSubnetBcidrBlock:
    Type: String
    Default: '10.0.22.0/24'
    Description: "Public Subnet-A CIDR Block"

  PrivateSubnetAcidrBlock:
    Type: String
    Default: '10.0.31.0/24'
    Description: "Private Subnet-A CIDR Block"

  PrivateSubnetBcidrBlock:
    Type: String
    Default: '10.0.32.0/24'
    Description: "Private Subnet-B CIDR Block"


Resources:
########################
#### Create VPC
########################
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDRblock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: "myVPC"
        - Key: Environment
          Value: !Ref Environment

########################
#### Create Subnets
########################
# Create Public subnet A
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1a
      CidrBlock: !Ref PublicSubnetAcidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet A"
        - Key: Environment
          Value: !Ref Environment

# Create Public subnet B
  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1b
      CidrBlock: !Ref PublicSubnetBcidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Public Subnet B"
        - Key: Environment
          Value: !Ref Environment

# Create Private subnet A
  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1a
      CidrBlock: !Ref PrivateSubnetAcidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Private Subnet A"
        - Key: Environment
          Value: !Ref Environment

# Create Public subnet B
  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1b
      CidrBlock: !Ref PrivateSubnetBcidrBlock
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Private Subnet B"
        - Key: Environment
          Value: !Ref Environment

########################################
#### Create And Attach Internet Gateway
########################################
# Create Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "Internet gateway"
        - Key: Environment
          Value: !Ref Environment
# Attach Internet Gateway to myVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

########################################
#### Create Routing tables
########################################
  # Empty Public Route Table Creation
  publicRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Public Route Table"
        - Key: Environment
          Value: !Ref Environment

  # Routes creation and Attachment for Public  Route Table
  RoutesForInternetGateway:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  # Associate Public Route for Subnets
  RouteAssociationSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref PublicSubnetA
  RouteAssociationSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Empty Private Route Table Creation
  privateRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: "Private Route Table"
        - Key: Environment
          Value: !Ref Environment

  # Routes creation and Attachment for Private  Route Table
  RoutesForNatGateway:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGateway

  # Associate Private Route for Subnets
  RouteAssociationPrivateSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref PrivateSubnetA
  RouteAssociationPrivateSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref PrivateSubnetB

########################################
#### Create Security Groups
########################################
# Create Ec2 Security Group
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: "Allow HTTP and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Create Security Group for Load Balancer
  ############## Duplicated ingress rule
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: "Allow inbound HTTP for LoadBalancer"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

########################################
#### Load Balancer
########################################
# Create Application Load Balancer v2
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebLoadBalancer
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
#        - !Ref PrivateSubnetA
#        - !Ref PrivateSubnetB
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: "Private Route Table"
        - Key: Environment
          Value: !Ref Environment

# Create Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

# Create Target Groups for the Load Balancer
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:

      VpcId: !Ref myVPC
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref PrivateWebAppInstanceA
          Port: 80
        - Id: !Ref PrivateWebAppInstanceB
          Port: 80
      Tags:
        - Key: Name
          Value: "ELB Target Group"
        - Key: Environment
          Value: !Ref Environment

########################################
#### Create S3 IAM Role for EC2 Instances
########################################
# Create IAM Role
  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref S3WritableRole

  S3WritableRole:
     Type: AWS::IAM::Role
     Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  RolePolicies:
    Type: AWS::IAM::Policy
    DependsOn:
      - PrivateWebAppInstanceA
      - PrivateWebAppInstanceB
    Properties:
      PolicyName: EC2InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref S3WritableRole

########################################
#### Create S3 Bucket
########################################
# Create S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: s3bucket-alexeyput
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: "S3 Bucket"
        - Key: Environment
          Value: !Ref Environment

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

# Create S3 Endpoint
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource: '*'
      RouteTableIds:
         - !Ref privateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref myVPC

########################################
#### Create NAT Gateway for private networks
########################################
  natGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      ConnectivityType: public
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnetA
      Tags:
        - Key: Name
          Value: "NAT Gateway"
        - Key: Environment
          Value: !Ref Environment
  EIP:
    DependsOn: AttachGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "Elastic IP"
        - Key: Environment
          Value: !Ref Environment

########################################
#### Create EC2 Images
########################################
  # Create Ec2-A in Public Subnet A
  WebAppInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
      InstanceType: t2.micro
      KeyName: AWS-default-key
      SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update
#          amazon-linux-extras install -y nginx1
#          systemctl start nginx
#          echo "<html><body><h1>Public instance Ec2-A in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html
#          sleep 1m
#          aws s3 cp /usr/share/nginx/html/index.html s3://s3bucket-alexeyput/publicA-index.html
      Tags:
        - Key: Name
          Value: "Public Instance A"
        - Key: Environment
          Value: !Ref Environment

#  # Create Ec2-B in Public Subnet B
#  WebAppInstanceB:
#    Type: AWS::EC2::Instance
#    Properties:
#      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
#      InstanceType: t2.micro
#      KeyName: AWS-default-key
#      SubnetId: !Ref PublicSubnetB
#      IamInstanceProfile: !Ref RootInstanceProfile
#      SecurityGroupIds:
#        - !Ref WebAppSecurityGroup
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash
#          sudo yum update
#          sudo amazon-linux-extras install -y nginx1
#          sudo systemctl start nginx
#          echo "<html><body><h1>Public instance Ec2-B in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html
#          sleep 1m
#          aws s3 cp /usr/share/nginx/html/index.html s3://s3bucket-alexeyput/publicB-index.html
#      Tags:
#        - Key: Name
#          Value: "Public Instance B"
#        - Key: Environment
#          Value: !Ref Environment

  # Create Ec2-A in Private Subnet A
  PrivateWebAppInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
      InstanceType: t2.micro
      KeyName: AWS-default-key
      SubnetId: !Ref PrivateSubnetA
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update
          amazon-linux-extras install -y nginx1
          systemctl start nginx
          echo "<html><body><h1>Private instance Ec2-A in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html
          sleep 1m
          aws s3 cp /usr/share/nginx/html/index.html s3://s3bucket-alexeyput/privateA-index.html
      Tags:
        - Key: Name
          Value: "Private Instance A"
        - Key: Environment
          Value: !Ref Environment

  # Create Ec2-B in Private Subnet B
  PrivateWebAppInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
      InstanceType: t2.micro
      KeyName: AWS-default-key
      SubnetId: !Ref PrivateSubnetB
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          sudo amazon-linux-extras install -y nginx1
          sudo systemctl start nginx
          echo "<html><body><h1>Private instance Ec2-B in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html
          sleep 1m
          aws s3 cp /usr/share/nginx/html/index.html s3://s3bucket-alexeyput/privateB-index.html
      Tags:
        - Key: Name
          Value: "Private Instance B"
        - Key: Environment
          Value: !Ref Environment

########################################
#### Output Section
########################################
Outputs:
  BastionHostIP:
    Description: Bastion Host (EC2-A Instance) Public Ip
    Value: !GetAtt WebAppInstanceA.PublicIp

#  PublicIpB:
#    Description: EC2-B Instance Public Ip
#    Value: !GetAtt WebAppInstanceB.PublicIp

  LoadBalancerUrl:
    Description: The URL of the Application Load Balancer
    Value: !GetAtt LoadBalancer.DNSName

  Environment:
    Description: Staging Environment
    Value:  !Ref Environment
