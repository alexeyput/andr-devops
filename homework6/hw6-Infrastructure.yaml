Description: "Andersen Training Homework 6. AWS Cloudformation"

Resources:
# Create VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: "myVPC"

# Create subnet A
  mySubnetA:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Subnet_A"

# Create subnet A
  mySubnetB:
    Type: "AWS::EC2::Subnet"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: eu-central-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "Subnet_B"

# Create Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "Internet_gateway"

# Attach Internet Gateway to myVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

# Empty Route Table Creation
  myRouteTable:
    Type: "AWS::EC2::RouteTable"
    DependsOn: myVPC
    Properties:
      VpcId: !Ref myVPC

# Creation and Attachment of Routes for Route Table
  RoutesForInternetGateway:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway
      RouteTableId: !Ref myRouteTable

# Associate Public Route for Subnets
  RouteAssociationSubnetA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref myRouteTable
      SubnetId: !Ref mySubnetA

  RouteAssociationSubnetB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref myRouteTable
      SubnetId: !Ref mySubnetB

# Create Ec2-A in Subnet A
  WebAppInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
      InstanceType: t2.micro
      KeyName: AWS-default-key
      SubnetId: !Ref mySubnetA
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          sudo amazon-linux-extras install -y nginx1
          sudo systemctl start nginx
          echo "<html><body><h1>Ec2-A instance in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html

# Create Ec2-B in Subnet B
  WebAppInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-099ccc441b2ef41ec  # Amazon Linux 2 AMI (HVM) - Kernel 4.14
      InstanceType: t2.micro
      KeyName: AWS-default-key
      SubnetId: !Ref mySubnetB
      SecurityGroupIds:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update
          sudo amazon-linux-extras install -y nginx1
          sudo systemctl start nginx
          echo "<html><body><h1>Ec2-B instance in Region ${AWS::Region}<h1></body></html>" > /usr/share/nginx/html/index.html

# Create Ec2 Security Group
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: "Allow HTTP and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

# Create Application Load Balancer v2
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WebLoadBalancer
 #     SubnetMappings:
#        - SubnetMapping
      Subnets:
        - !Ref mySubnetA
        - !Ref mySubnetB
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

# Create Listener
# Create Target Group
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
#  DefaultTargetGroup:
#    Type: AWS::ElasticLoadBalancingV2::TargetGroup
#    Properties:
##      Name: !Sub ${EnvironmentName}-default
#      VpcId: !Ref myVPC
#      Port: 80
#      Protocol: HTTP

# Create Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: "Allow inbound HTTP for LoadBalancer"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0


# Create Target Groups for the Load Balancer
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
#      Name: !Sub ${EnvironmentName}-default
      VpcId: !Ref myVPC
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref WebAppInstanceA
          Port: 80
        - Id: !Ref WebAppInstanceB
          Port: 80

# Outputs
Outputs:
  PublicIpA:
    Description: EC2-A Instance Public Ip
    Value: !GetAtt WebAppInstanceA.PublicIp
  PublicIpB:
    Description: EC2-B Instance Public Ip
    Value: !GetAtt WebAppInstanceB.PublicIp

  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListener


# Create VPC
# Create CIDR
# Create 2 Subnets
# Create Internet Gateway
# Create Routing Table
# Create Security Groups
# Create Network ACLs
# Create EC2